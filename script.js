const chatbotToggler = document.querySelector(".chatbot-toggler");
const closeBtn = document.querySelector(".close-btn");
const chatbox = document.querySelector(".chatbox");
const chatInput = document.querySelector(".chat-input textarea");
const sendChatBtn = document.querySelector("#send-btn");

const inputInitHeight = chatInput.scrollHeight;
let unknownCount = 0;

const responses = {
    greetings: [
        "Ol√°! Como posso ajudar voc√™ hoje?",
        "Oi! Como posso ser √∫til?",
        "Ol√°! Estou aqui para responder √†s suas perguntas.",
        "Oi! Bem-vindo(a) ao nosso assistente virtual."
    ],
    hours: [
        "Nosso hor√°rio de atendimento √© das 9h √†s 18h, de segunda a sexta-feira.",
        "Estamos dispon√≠veis das 9h √†s 18h durante a semana.",
        "Voc√™ pode entrar em contato conosco entre as 9h e as 18h, de segunda a sexta-feira."
    ],
    website: [
        "Visite nosso site em <a href='https://www.exemplo.com' target='_blank'>www.exemplo.com</a> para obter mais informa√ß√µes.",
        "Para saber mais, acesse <a href='https://www.exemplo.com' target='_blank'>www.exemplo.com</a>.",
        "Todas as informa√ß√µes que voc√™ precisa est√£o em <a href='https://www.exemplo.com' target='_blank'>www.exemplo.com</a>."
    ],
    contact: [
        "Entre em contato conosco pelo email <a href='mailto:suporte@exemplo.com'>suporte@exemplo.com</a>.",
        "Voc√™ pode nos enviar um email para <a href='mailto:suporte@exemplo.com'>suporte@exemplo.com</a>.",
        "Para falar conosco, envie uma mensagem para <a href='mailto:suporte@exemplo.com'>suporte@exemplo.com</a>."
    ],
    thanks: [
        "Obrigado por entrar em contato conosco!",
        "Agradecemos sua pergunta! Estamos aqui para ajudar.",
        "Obrigado por conversar com nosso assistente virtual."
    ],
    news: [
        "As √∫ltimas not√≠cias s√£o sempre interessantes. Gostaria de ver as principais manchetes?",
        "Fique por dentro das √∫ltimas not√≠cias. Posso mostrar algumas manchetes atuais.",
        "Not√≠cias fresquinhas! Posso te mostrar algumas das not√≠cias mais recentes."
    ],
    help: [
        "Bem-vindo(a) ao nosso assistente virtual! Aqui est√£o algumas dicas para voc√™:",
        "- Pergunte sobre nosso hor√°rio de atendimento, localiza√ß√£o e mais.",
        "- Quer saber as √∫ltimas not√≠cias? Digite 'not√≠cias'.",
        "- Precisa de informa√ß√µes de contato? Pergunte sobre email e telefone.",
        "- Quer conhecer nossos produtos e servi√ßos? Digite 'produtos' ou 'servi√ßos'.",
        "- Tem alguma pergunta? Tente 'perguntas frequentes'.",
        "- Quer nos dar feedback? Digite 'feedback' ou 'avalia√ß√£o'.",
        "- Digite 'ajuda' a qualquer momento para ver estas instru√ß√µes novamente.",
        "- Estou aqui para ajudar! üòä"
    ],
    productsServicesInfo: [
        "N√≥s oferecemos uma variedade de produtos e servi√ßos para atender √†s suas necessidades.",
        "Nossos produtos e servi√ßos s√£o projetados para proporcionar a melhor experi√™ncia poss√≠vel.",
        "Se voc√™ est√° procurando por produtos ou servi√ßos de alta qualidade, voc√™ veio ao lugar certo."
    ],
    faqs: [
        "Aqui est√£o algumas perguntas frequentes que nossos clientes costumam fazer:",
        "1. Como fa√ßo para fazer uma reserva?",
        "2. Qual √© a pol√≠tica de cancelamento?",
        "3. Voc√™s oferecem descontos para clientes regulares?",
        "4. Quanto tempo leva para receber meus produtos?",
        "5. Como posso acompanhar o status do meu pedido?"
    ],
    feedbackPrompt: [
        "Valorizamos sua opini√£o! Se voc√™ tiver um momento, ficar√≠amos felizes em ouvir o que voc√™ achou da nossa assistente virtual.",
        "Seu feedback nos ajuda a melhorar continuamente nossos servi√ßos. Por favor, compartilhe suas impress√µes conosco!"
    ],
    unknown: [
        "Pe√ßo desculpas, mas n√£o entendi sua pergunta. Poderia reformul√°-la?",
        "Desculpe, n√£o tenho certeza do que voc√™ est√° perguntando. Poderia tentar novamente?",
        "N√£o consegui compreender o que voc√™ disse. Poderia ser mais claro?"
    ]
};

const getRandomResponse = (responseArray) => {
    const randomIndex = Math.floor(Math.random() * responseArray.length);
    return responseArray[randomIndex];
};

const createChatLi = (message, className) => {
    const chatLi = document.createElement("li");
    chatLi.classList.add("chat", className);
    const chatContent = className === "outgoing" ? `<p>${message}</p>` : `<span class="material-symbols-outlined">smart_toy</span><p>${message}</p>`;
    chatLi.innerHTML = chatContent;
    return chatLi;
};

const generateProductsServicesInfo = () => {
    return getRandomResponse(responses.productsServicesInfo);
};

const generateFAQResponse = () => {
    return responses.faqs.join("<br>");
};

const generateFeedbackPrompt = () => {
    return getRandomResponse(responses.feedbackPrompt);
};

const generateResponse = async (userMessage) => {
    const lowerCaseMessage = userMessage.toLowerCase();

    if (lowerCaseMessage.includes("hor√°rio") || lowerCaseMessage.includes("atendimento")) {
        return getRandomResponse(responses.hours);
    } else if (lowerCaseMessage.includes("nome") || lowerCaseMessage.includes("empresa")) {
        return getRandomResponse(responses.greetings);
    } else if (lowerCaseMessage.includes("website") || lowerCaseMessage.includes("site")) {
        return getRandomResponse(responses.website);
    } else if (lowerCaseMessage.includes("contato") || lowerCaseMessage.includes("email")) {
        return getRandomResponse(responses.contact);
    } else if (lowerCaseMessage.includes("obrigado") || lowerCaseMessage.includes("agradecimento")) {
        return getRandomResponse(responses.thanks);
    } else if (lowerCaseMessage.includes("not√≠cias") || lowerCaseMessage.includes("novidades")) {
        return getRandomResponse(responses.news);
    } else if (lowerCaseMessage.includes("ajuda")) {
        return getRandomResponse(responses.help);
    } else if (lowerCaseMessage.includes("produtos") || lowerCaseMessage.includes("servi√ßos")) {
        return generateProductsServicesInfo();
    } else if (lowerCaseMessage.includes("perguntas frequentes")) {
        return generateFAQResponse();
    } else if (lowerCaseMessage.includes("feedback") || lowerCaseMessage.includes("avalia√ß√£o")) {
        return generateFeedbackPrompt();
    } else {
        unknownCount++;
        if (unknownCount === 2) {
            unknownCount = 0;
            return `Pe√ßo desculpas, mas n√£o consegui entender sua pergunta duas vezes seguidas. Digite "ajuda" para ver as instru√ß√µes novamente ou entre em contato conosco para assist√™ncia personalizada.`;
        } else {
            return getRandomResponse(responses.unknown);
        }
    }
};

const typeMessage = async (message) => {
    const responseLi = createChatLi("", "incoming");
    chatbox.appendChild(responseLi);

    const typingSpeed = 10;

    let i = 0;
    const typingInterval = setInterval(() => {
        if (i <= message.length) {
            responseLi.querySelector("p").innerHTML = message.substr(0, i);
            i++;
            chatbox.scrollTo(0, chatbox.scrollHeight);
        } else {
            clearInterval(typingInterval);
        }
    }, typingSpeed);
};

const handleChat = async () => {
    const userMessage = chatInput.value.trim();
    if (!userMessage) return;

    chatInput.value = "";
    chatInput.style.height = `${inputInitHeight}px`;

    chatbox.appendChild(createChatLi(userMessage, "outgoing"));
    chatbox.scrollTo(0, chatbox.scrollHeight);

    await new Promise((resolve) => setTimeout(resolve, 500));

    const response = await generateResponse(userMessage);
    await typeMessage(response);
};

chatInput.addEventListener("input", () => {
    chatInput.style.height = `${inputInitHeight}px`;
    chatInput.style.height = `${chatInput.scrollHeight}px`;
});

chatInput.addEventListener("keydown", async (e) => {
    if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
        e.preventDefault();
        await handleChat();
    }
});

sendChatBtn.addEventListener("click", async () => {
    await handleChat();
});

closeBtn.addEventListener("click", () => {
    document.body.classList.remove("show-chatbot");
});

chatbotToggler.addEventListener("click", () => {
    document.body.classList.toggle("show-chatbot");
});
